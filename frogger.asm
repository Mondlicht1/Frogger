#####################################################################
#
# CSC258H5S Fall 2021 Assembly Final Project
# University of Toronto, St. George
#
# Student: Tu Pham, 1006926454
#
# Bitmap Display Configuration:
# - Unit width in pixels: 4
# - Unit height in pixels: 4
# - Display width in pixels: 512
# - Display height in pixels: 512
# - Base Address for Display: 0x10008000 ($gp)
#
# Which milestone is reached in this submission?
# - Milestone 5 (choose the one the applies)
#
# Which approved additional features have been implemented?
#
#	Hard features:
# 1. Sound effects for jumping, crashing, drowning, scoring goal, winning, and losing .
# 2. Display the player's score.
#	Easy features:
# 3. Make objects look more like the arcade version
# 4. Objects in different rows have differnt speed.
# 5. Third row each section. (5 actually).
# 6. Respawn Animation.
# 7. Randomize the size and appearance of cars and logs.
#
# Any additional information that the TA needs to know:
# - When the game is over, press any key to continue, press escape to terminate the program.
#
#####################################################################
.data
	displayAddress: .word 0x10008000
	displayReservedSpace: .space 32764 	# To avoid the bitmap display overlapping with data arrays
	grassBitmap: .word 
			0x004fbf39, 0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 0x0086d84b, 0x002d992d, 
			0x0037b22c, 0x002d992d, 0x002d992d, 0x004fbf39, 0x002d992d, 0x002d992d, 0x002d992d, 0x004fbf39, 0x002d992d, 
			0x002d992d, 0x002d992d, 0x002d992d, 0x0037b22c, 0x00336644, 0x002d992d, 0x003aa343, 0x002d992d, 0x002d992d, 
			0x002d992d, 0x004fbf39, 0x002d992d, 0x002d992d, 0x003ca932, 0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 
			0x002d992d, 0x0037b22c, 0x002d992d, 0x002d992d, 0x0035873a, 0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 
			0x002d992d, 0x0037b22c, 0x00336644, 0x002d992d, 0x002d992d, 0x0086d84b, 0x002d992d, 0x004fbf39, 0x002d992d, 
			0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 0x004fbf39, 0x002d992d, 0x002d992d, 0x002d992d, 
			0x002d992d, 0x002d992d, 0x0037b22c, 0x00336644, 0x002d992d, 0x002d992d, 0x003aa343, 0x002d992d, 0x002d992d, 
			0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d, 0x002d992d

	waterBitmap: .word 0x00aadd:81	# The texture for the water tiles
	roadBitmap: .word 
			0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666,
			0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666,
			0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666,
			0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666,
			0x00666666, 0x00666666, 0x00666666, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00666666, 0x00666666, 0x00666666,
			0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666,
			0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666,
			0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666,
			0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666, 0x00666666
	
	# Digit bitmaps:
	digitBitmap: .word #0
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			
			0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000,
			
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 
			
			0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 
			
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000,
			
			0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
			0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000

	heartBitmap: .word
			0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
			0xff000000, 0x00e74c3c, 0x00e74c3c, 0xff000000, 0x00e74c3c, 0x00e74c3c, 0xff000000, 0xff000000, 
			0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0xff000000, 
			0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0xff000000, 
			0xff000000, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0xff000000, 0xff000000, 
			0xff000000, 0xff000000, 0x00e74c3c, 0x00e74c3c, 0x00e74c3c, 0xff000000, 0xff000000, 0xff000000, 
			0xff000000, 0xff000000, 0xff000000, 0x00e74c3c, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
			0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
			
	deathBitmap: .word
	0xff000000, 0xff000000, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0xff000000, 0xff000000, 
	0xff000000, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0xff000000, 
	0x00c3c3c3, 0x00c3c3c3, 0xff000000, 0xff000000, 0x00c3c3c3, 0xff000000, 0xff000000, 0x00c3c3c3, 0x00c3c3c3, 
	0x00c3c3c3, 0x00c3c3c3, 0xff000000, 0xff000000, 0x00c3c3c3, 0xff000000, 0xff000000, 0x00c3c3c3, 0x00c3c3c3, 
	0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 
	0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0xff000000, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 
	0xff000000, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0xff000000, 
	0xff000000, 0xff000000, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0x00c3c3c3, 0xff000000, 0xff000000, 
	0xff000000, 0xff000000, 0x00c3c3c3, 0xff000000, 0x00c3c3c3, 0xff000000, 0x00c3c3c3, 0xff000000, 0xff000000
	
	scoreTextBitmap: .word
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 

	losingBitmap: .word	# 61 x 9
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
	0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
	0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
	0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
	0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
	0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
	
	winningBitmap: .word	# 52 x  9
	0x00010101, 0x00000000, 0x00020202, 0x00000000, 0x00010101, 0x00000000, 0x00000000, 0x00000000, 0x00030303, 0x00000000, 0x00000000, 0x00000000, 0x00010101, 0x00030303, 0x00000000, 0x00010101, 0x00010101, 0x00020202, 0x00000000, 0x00020202, 0x00000000, 0x00030303, 0x00000000, 0x00030303, 0x00000000, 0x00000000, 0x00030303, 0x00000000, 0x00030303, 0x00030303, 0x00000000, 0x00010101, 0x00020202, 0x00000000, 0x00020202, 0x00000000, 0x00010101, 0x00020202, 0x00000000, 0x00020202, 0x00000000, 0x00000000, 0x00010101, 0x00000000, 0x00040404, 0x00010101, 0x00000000, 0x00030303, 0x00010101, 0x00010101, 0x00000000, 0x00020202, 
	0x00020202, 0x00fbfbfb, 0x00050505, 0x00000000, 0x00050505, 0x00ffffff, 0x00030303, 0x00010101, 0x00000000, 0x00ffffff, 0x00f8f8f8, 0x00ffffff, 0x00040404, 0x00000000, 0x00010101, 0x00fefefe, 0x00000000, 0x00010101, 0x00060606, 0x00fcfcfc, 0x00000000, 0x00000000, 0x00020202, 0x00000000, 0x00010101, 0x00fbfbfb, 0x00010101, 0x00040404, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00010101, 0x00020202, 0x00ffffff, 0x00ffffff, 0x00fefefe, 0x00010101, 0x00000000, 0x00000000, 0x00fafafa, 0x00ffffff, 0x00040404, 0x00000000, 0x00010101, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00060606, 
	0x00020202, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00020202, 0x00ffffff, 0x00000000, 0x00060606, 0x00010101, 0x00f7f7f7, 0x00020202, 0x00030303, 0x00ffffff, 0x00050505, 0x00000000, 0x00010101, 0x00ffffff, 0x00000000, 0x00010101, 0x00000000, 0x00060606, 0x00020202, 0x00ffffff, 0x00000000, 0x00000000, 0x00040404, 0x00040404, 0x00000000, 0x00fefefe, 0x00050505, 0x00040404, 0x00fefefe, 0x00000000, 0x00060606, 0x00000000, 0x00fcfcfc, 0x00030303, 0x00020202, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00020202, 0x00010101, 0x00040404, 0x00fafafa, 0x00000000, 
	0x00000000, 0x00030303, 0x00ffffff, 0x00030303, 0x00ffffff, 0x00040404, 0x00000000, 0x00010101, 0x00ffffff, 0x00000000, 0x00000000, 0x00040404, 0x00ffffff, 0x00000000, 0x00020202, 0x00fefefe, 0x00030303, 0x00000000, 0x00000000, 0x00fefefe, 0x00030303, 0x00010101, 0x00030303, 0x00000000, 0x00000000, 0x00ffffff, 0x00050505, 0x00040404, 0x00000000, 0x00000000, 0x00040404, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00010101, 0x00ffffff, 0x00000000, 0x00020202, 0x00fdfdfd, 0x00030303, 0x00010101, 0x00fbfbfb, 0x00030303, 0x00fefefe, 0x00010101, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 
	0x00040404, 0x00000000, 0x00010101, 0x00fefefe, 0x00000000, 0x00000000, 0x00030303, 0x00000000, 0x00fefefe, 0x00020202, 0x00020202, 0x00010101, 0x00fbfbfb, 0x00020202, 0x00000000, 0x00f9f9f9, 0x00000000, 0x00030303, 0x00020202, 0x00fcfcfc, 0x00000000, 0x00030303, 0x00000000, 0x00060606, 0x00010101, 0x00fbfbfb, 0x00000000, 0x00020202, 0x00ffffff, 0x00000000, 0x00040404, 0x00fbfbfb, 0x00040404, 0x00080808, 0x00fcfcfc, 0x00040404, 0x00030303, 0x00000000, 0x00ffffff, 0x00020202, 0x00010101, 0x00fcfcfc, 0x00020202, 0x00000000, 0x00fcfcfc, 0x00010101, 0x00fcfcfc, 0x00000000, 0x00030303, 0x00020202, 0x00fdfdfd, 0x00010101, 
	0x00020202, 0x00020202, 0x00020202, 0x00ffffff, 0x00000000, 0x00020202, 0x00000000, 0x00010101, 0x00ffffff, 0x00000000, 0x00040404, 0x00000000, 0x00ffffff, 0x00000000, 0x00040404, 0x00ffffff, 0x00050505, 0x00010101, 0x00010101, 0x00fdfdfd, 0x00000000, 0x00000000, 0x00030303, 0x00000000, 0x00000000, 0x00ffffff, 0x00030303, 0x00000000, 0x00ffffff, 0x00040404, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00010101, 0x00ffffff, 0x00010101, 0x00010101, 0x00fdfdfd, 0x00000000, 0x00020202, 0x00020202, 0x00ffffff, 0x00fcfcfc, 0x00040404, 0x00000000, 0x00030303, 0x00fcfcfc, 0x00030303, 
	0x00000000, 0x00030303, 0x00010101, 0x00fdfdfd, 0x00020202, 0x00020202, 0x00000000, 0x00000000, 0x00ffffff, 0x00030303, 0x00000000, 0x00000000, 0x00ffffff, 0x00020202, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00040404, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00010101, 0x00ffffff, 0x00010101, 0x00040404, 0x00fdfdfd, 0x00070707, 0x00000000, 0x00030303, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00040404, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00020202, 0x00000000, 0x00040404, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00020202, 0x00000000, 0x00000000, 0x00040404, 0x00000000, 0x00ffffff, 0x00fbfbfb, 0x00ffffff, 0x00000000, 0x00000000, 0x00080808, 0x00000000, 0x00fdfdfd, 0x00ffffff, 0x00fcfcfc, 0x00000000, 0x00020202, 0x00000000, 0x00030303, 0x00000000, 0x00040404, 0x00000000, 0x00ffffff, 0x00030303, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00010101, 0x00000000, 0x00010101, 0x00fefefe, 0x00ffffff, 0x00fefefe, 0x00000000, 0x00020202, 0x00020202, 0x00fdfdfd, 0x00000000, 0x00010101, 0x00040404, 0x00030303, 0x00fbfbfb, 0x00040404, 0x00000000, 0x00040404, 0x00fafafa, 0x00010101, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 


	# Score and lives
	lives: .word 3
	score: .word 0
	
	# Special variables for game state:
	isPlaying: .word 1
	isWinning: .word 0
	isDead:	.word 0
	
	# Information about the frog
	frogPosX: .word 72
	frogPosY: .word 117
	frogWidth: .word 9
	frogHeight: .word 9
	frogStartX: .word 72
	frogStartY: .word 117
	frogPrevY: .word 117
	frogLogAddress: .word 0 # The address of the log in a water lane that the frog is currently sticking to. 0 means no log.
	frogLogOffset: .word 0 # The offset of the frogPosX compared to the log posX. Can be negative
	frogBitmap: .word # 9x9 bitmap. 0xff000000 means transparent pixel.
			0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 
			0xff000000, 0x00000000, 0x0077b255, 0x00000000, 0x00000000, 0x00000000, 0x0077b255, 0x00000000, 0xff000000, 
			0xff000000, 0x00000000, 0x00fff200, 0x0077b255, 0x0077b255, 0x0077b255, 0x00fff200, 0x00000000, 0xff000000, 
			0x00000000, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x00000000, 
			0x00000000, 0x0077b255, 0x0077b255, 0x00b6d6a3, 0x0077b255, 0x00b6d6a3, 0x0077b255, 0x0077b255, 0x00000000, 
			0x00000000, 0x00000000, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x00000000, 0x00000000, 
			0x00000000, 0x00c6e5b3, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00c6e5b3, 0x00000000, 
			0xff000000, 0x00000000, 0x00000000, 0x00c6e5b3, 0x00c6e5b3, 0x00c6e5b3, 0x00000000, 0x00000000, 0xff000000, 
			0x00000000, 0x0077b255, 0x0077b255, 0x00000000, 0x00c6e5b3, 0x00000000, 0x0077b255, 0x0077b255, 0x00000000



	goals: .word 0, 0, 63, 0, 117, 0	# Array of x-positions and the value for whether the goal is filled of goals and  Goals are located at Y = 9, are 9x9 squares. 
						# There are 3 goals. Ordered in posX=, filled=, posX=, flled=, posX=, filled=
	goalBitmap: .word
	0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
	0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 
	0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 
	0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 
	0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 
	0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 
	0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 
	0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 
	0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
	
	goalMarker: .word
	0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
	0x00ffffff, 0x00000000, 0x0077b255, 0x00000000, 0x00000000, 0x00000000, 0x0077b255, 0x00000000, 0x00ffffff, 
	0x00ffffff, 0x00000000, 0x00fff200, 0x0077b255, 0x0077b255, 0x0077b255, 0x00fff200, 0x00000000, 0x00ffffff, 
	0x00ffffff, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x00ffffff, 
	0x00ffffff, 0x0077b255, 0x0077b255, 0x00b6d6a3, 0x0077b255, 0x00b6d6a3, 0x0077b255, 0x0077b255, 0x00ffffff, 
	0x00ffffff, 0x00000000, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x0077b255, 0x00000000, 0x00ffffff, 
	0x00ffffff, 0x00c6e5b3, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00c6e5b3, 0x00ffffff, 
	0x00ffffff, 0x00000000, 0x00000000, 0x00c6e5b3, 0x00c6e5b3, 0x00c6e5b3, 0x00000000, 0x00000000, 0xff000000, 
	0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
	
	################### ROAD #####################################
	car1Bitmap: .word 
	0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 
	0xff000000, 0x00000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 0xff000000, 
	0x00000000, 0x00fff200, 0x00cd101a, 0x00000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00000000, 0x00cd101a, 0x00000000, 
	0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00000000, 
	0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00000000, 
	0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00000000, 
	0x00000000, 0x00fff200, 0x00cd101a, 0x00000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00000000, 0x00cd101a, 0x00000000, 
	0xff000000, 0x00000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 0xff000000, 
	0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000,
	0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 
	0xff000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00000000, 0xff000000, 
	0x00000000, 0x00cd101a, 0x00000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00000000, 0x00cd101a, 0x00fff200, 0x00000000, 
	0x00000000, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 
	0x00000000, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 
	0x00000000, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00cd101a, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 
	0x00000000, 0x00cd101a, 0x00000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00000000, 0x00cd101a, 0x00fff200, 0x00000000, 
	0xff000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00cd101a, 0x00cd101a, 0x00000000, 0x00000000, 0xff000000, 
	0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000

	
	car2Bitmap: .word 
	0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 
	0x00000000, 0x00c3c3c3, 0x007f7f7f, 0x00000000, 0xff000000, 0x00000000, 0x003e3e3e, 0x003e3e3e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x003e3e3e, 0x003e3e3e, 0x00000000, 0xff000000, 
	0x00000000, 0x00c3c3c3, 0x007f7f7f, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x00000000, 0x00ed1c24, 
	0x00000000, 0x00c3c3c3, 0x007f7f7f, 0x007f7f7f, 0x007f7f7f, 0x00000000, 0x003f48cc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x003f48cc, 0x00000000, 
	0x00000000, 0x00c3c3c3, 0x007f7f7f, 0x007f7f7f, 0x007f7f7f, 0x00000000, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x00000000, 
	0x00000000, 0x00c3c3c3, 0x007f7f7f, 0x007f7f7f, 0x007f7f7f, 0x00000000, 0x003f48cc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x003f48cc, 0x00000000, 
	0x00000000, 0x00c3c3c3, 0x007f7f7f, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x00000000, 0x00ed1c24, 
	0x00000000, 0x00c3c3c3, 0x007f7f7f, 0x00000000, 0xff000000, 0x00000000, 0x003e3e3e, 0x003e3e3e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x003e3e3e, 0x003e3e3e, 0x00000000, 0xff000000, 
	0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 
	0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 
	0xff000000, 0x00000000, 0x003e3e3e, 0x003e3e3e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x003e3e3e, 0x003e3e3e, 0x00000000, 0xff000000, 0x00000000, 0x007f7f7f, 0x00c3c3c3, 0x00000000, 
	0x00ed1c24, 0x00000000, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x007f7f7f, 0x00c3c3c3, 0x00000000, 
	0x00000000, 0x003f48cc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x003f48cc, 0x00000000, 0x007f7f7f, 0x007f7f7f, 0x007f7f7f, 0x00c3c3c3, 0x00000000, 
	0x00000000, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x00000000, 0x007f7f7f, 0x007f7f7f, 0x007f7f7f, 0x00c3c3c3, 0x00000000, 
	0x00000000, 0x003f48cc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x007c84dc, 0x003f48cc, 0x00000000, 0x007f7f7f, 0x007f7f7f, 0x007f7f7f, 0x00c3c3c3, 0x00000000, 
	0x00ed1c24, 0x00000000, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x003f48cc, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x007f7f7f, 0x00c3c3c3, 0x00000000, 
	0xff000000, 0x00000000, 0x003e3e3e, 0x003e3e3e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x003e3e3e, 0x003e3e3e, 0x00000000, 0xff000000, 0x00000000, 0x007f7f7f, 0x00c3c3c3, 0x00000000, 
	0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000	
	
	car3Bitmap: .word
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 
	0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00000000, 0x00000000, 
	0x00000000, 0x00ffc90e, 0x00ffc90e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00ffc90e, 0x00ffc90e, 0x00000000, 0x00000000, 0x00ffc90e, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00000000, 0x00ffe179, 0x00ffe179, 0x00000000, 
	0x00000000, 0x00ffc90e, 0x00ffc90e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00000000, 0x00000000, 
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
	0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
	0x00000000, 0x00000000, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffc90e, 0x00ffc90e, 0x00000000, 
	0x00000000, 0x00ffe179, 0x00ffe179, 0x00000000, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffe179, 0x00ffc90e, 0x00000000, 0x00000000, 0x00ffc90e, 0x00ffc90e, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffc90e, 0x00ffc90e, 0x00000000, 
	0x00000000, 0x00000000, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00ffc90e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 
	0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000

	# An object sprite consits of its dimensions and its address two the bitmap. Thus it takes 3 words.
	car1Sprite: .word 13, 9, 0 # width, height, bitmap address
	car2Sprite: .word 16, 9, 0
	car3Sprite: .word 21, 9, 0
	
	# Car spritesheet. Ad array of sprites (addresses)
	roadSpriteSheet: .space	12	# 4 bits * num cars
	roadSpriteNum:	.word 3
	
	################################# WATER ##################################################################
	log1Bitmap: .word 
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
	0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 
	0xff000000, 0x00000000, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00000000, 0xff000000, 
	0x00000000, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00000000, 0x00c1a07b, 0x00000000, 
	0x00000000, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00b97a57, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00000000, 0x00c1a07b, 0x00000000, 
	0x00000000, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00a06041, 0x00000000, 0x00c1a07b, 0x00000000, 
	0xff000000, 0x00000000, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00774931, 0x00000000, 0x00000000, 
	0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
	
	log2Bitmap: .word 
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
	0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 
	0xff000000, 0x00000000, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x00000000, 0xff000000, 
	0x00000000, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x00b97a57, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x00000000, 0x00cfa38b, 0x00000000, 
	0x00000000, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x00b97a57, 0x009e704e, 0x009e704e, 0x00000000, 0x00cfa38b, 0x00000000, 
	0x00000000, 0x009e704e, 0x00b97a57, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x009e704e, 0x00b97a57, 0x00b97a57, 0x009e704e, 0x009e704e, 0x009e704e, 0x00000000, 0x00cfa38b, 0x00000000, 
	0xff000000, 0x00000000, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x007c4e34, 0x00000000, 0xff000000, 
	0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000,
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
	
	lily1Bitmap: .word
	0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 
	0xff000000, 0xff000000, 0x00000000, 0x0060a080, 0x00608080, 0x00000000, 0x0060a040, 0x0060a080, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x0060a080, 0x0060a080, 0x00000000, 0x0040a040, 0x0060a080, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x0060a080, 0x0060a080, 0x00000000, 0x0040a040, 0x0060a080, 0x00000000, 0xff000000, 0xff000000, 
	0xff000000, 0x00000000, 0x0040a080, 0x0040a040, 0x0040a040, 0x00004000, 0x0040a040, 0x0040a040, 0x0040a040, 0x00000000, 0xff000000, 0x00000000, 0x0040a040, 0x0040a040, 0x0040a040, 0x00004000, 0x0040a040, 0x0040a040, 0x0040a040, 0x00000000, 0xff000000, 0x00000000, 0x0040a040, 0x0040a040, 0x0040a040, 0x00004000, 0x0040a040, 0x0040a040, 0x0060a040, 0x00000000, 0xff000000, 
	0x00000000, 0x0040a080, 0x0040a040, 0x0020a040, 0x0040a040, 0x0040a040, 0x0040a040, 0x0080e080, 0x0020a040, 0x0040a040, 0x00000000, 0x0060a080, 0x0040a040, 0x0020c040, 0x0040a040, 0x0040a040, 0x0040a040, 0x0080e080, 0x0040a040, 0x0040a040, 0x00000000, 0x0040a040, 0x0040a040, 0x0020a040, 0x0040a040, 0x0040a040, 0x0040a040, 0x0080e080, 0x0040a040, 0x0040a080, 0x00000000, 
	0x00000000, 0x0040a080, 0x0040a040, 0x0020a040, 0x0080e080, 0x0040c040, 0x0080e080, 0x0040a040, 0x0040a040, 0x0040a040, 0x00000000, 0x0040a040, 0x0020a040, 0x0020a040, 0x0080e080, 0x0040a040, 0x0080e080, 0x0040c040, 0x0020a040, 0x0040a040, 0x00004000, 0x0040a040, 0x0040a040, 0x0020a040, 0x0080e080, 0x0040a040, 0x0080e080, 0x0040c040, 0x0020a040, 0x0040a040, 0x00000000, 
	0x00000000, 0x0060a080, 0x0040a040, 0x0020a040, 0x0020a040, 0x0020a040, 0x0040c040, 0x0040a040, 0x0040a040, 0x0040a040, 0x00000000, 0x0040a080, 0x0040a040, 0x0020a040, 0x0020a040, 0x0040c040, 0x0040c040, 0x0040a040, 0x0040a040, 0x0040a040, 0x00000000, 0x0040a080, 0x0020a040, 0x0020c040, 0x0020a040, 0x0040c040, 0x0020a040, 0x0040a040, 0x0040a040, 0x0040a040, 0x00000000, 
	0xff000000, 0x00000000, 0x0040a040, 0x0020a040, 0x0020c040, 0x0020c040, 0x0020c040, 0x0040a040, 0x0040a040, 0x00000000, 0xff000000, 0x00000000, 0x0040a040, 0x0040a040, 0x0020a040, 0x0020c040, 0x0020a040, 0x0040a040, 0x0040a040, 0x00000000, 0xff000000, 0x00000000, 0x0040a040, 0x0020a040, 0x0020c040, 0x0020a040, 0x0020c040, 0x0040a040, 0x0040a040, 0x00000000, 0xff000000, 
	0xff000000, 0xff000000, 0x00000000, 0x0040a040, 0x0040a040, 0x0040a040, 0x0040a040, 0x0040a040, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x0040a040, 0x0040a040, 0x0040a040, 0x0040a040, 0x0040a080, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x0040a040, 0x0040a080, 0x0040a040, 0x0040a040, 0x0040a040, 0x00000000, 0xff000000, 0xff000000, 
	0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000

	
	log1Sprite: .word 36, 9, 0x0
	log2Sprite: .word 27, 9, 0x0
	lily1Sprite: .word 31, 9, 0x0
	
	waterSpriteSheet: .space 12 # 4 bytes x num sprites
	waterSpriteNum: .word 3	
	##########################################################################################################
	# The game is divided into 15 lanes, each has a different Y-coordinate, an address to a tile bitmap, 
	# a velocity for all of its objects, a moving direction, the estimated time for the most recently spawned 
	# object to fully appear, and an array of 4 objects.
	# Each object in the arrays takes up 2 words: its X-coordinate, and the address of its sprite.
	# The total number of bytes needed for 15 lanes is (4 + 4 + 4 + 4 + 4 + 4 * 2 * 3) * 15 = 660 bytes
	# Each lane takes 44 bytes.
	lanes: .word 128:165 # initially all objs have x-coord =128 | 165 words = 660 bytes
	lanesNum: .word 15
	lanesObjNum: .word 3
	
.text
##################################################################################################################
########################################### Configuring game parameters ##########################################
data_initialization:
	la $t2, roadSpriteSheet
	# Map the sprites to their correct addresses
	la $t0, car1Bitmap # Load the address of car1Bitmap into $t1
	la $t1, car1Sprite
	sw $t0, 8($t1) # Store the bitmap address as the third element of car1Sprite
	sw $t1, 0($t2) # Store car2Sprite as first element of carSpriteSheet
	# Same for car 2 sprite
	la $t0, car2Bitmap
	la $t1, car2Sprite
	sw $t0, 8($t1)
	sw $t1, 4($t2) # Store address of car2Sprite as second element of the car sprite sheet
	
	la $t0, car3Bitmap
	la $t1, car3Sprite
	sw $t0, 8($t1)
	sw $t1, 8($t2) # Store address of car2Sprite as second element of the car sprite sheet
	
	# The water:
	la $t2, waterSpriteSheet
	# Map the sprites to their correct addresses
	la $t0, log1Bitmap # Load the address of log1Bitmap into $t1
	la $t1, log1Sprite
	sw $t0, 8($t1) # bitmap address -> sprite[3]
	sw $t1, 0($t2) # sprite address -> sprite sheet[0]

	la $t0, log2Bitmap
	la $t1, log2Sprite
	sw $t0, 8($t1)
	sw $t1, 4($t2) # sprite addr -> sheet[4]
	
	la $t0, lily1Bitmap
	la $t1, lily1Sprite
	sw $t0, 8($t1)
	sw $t1, 8($t2) # Sprite addr -> sheet[8]
	
	# Store a few variables in $s for global use
	la $s0, grassBitmap
	la $s1, waterBitmap
	la $s2, roadBitmap
	lw $s3, displayAddress 	# This is a globally used register
	la $s4, lanes 		# array of lanes. Each "element" is a series of 100 bytes. This is globally used.
	# Getting the current system times (lower 32 bits, from Jan 1970 to now, in miliseconds.)
	li $v0, 30
	syscall # $a0 now stores the current system time.
	sll $a0, $a0, 1 # Logical Shift left and right $a0 to avoid it being a negative integer (2's complement)
	srl $s5, $a0, 1 # Initialize the value of $s5, which is the "previous" system time. Used to update the game.
	
	# LANES CONFIGURATIONS: Type of lane. Other configuration will be set later during game initialization.
	add $t8, $s4, $zero	# copy the address of the lanes array for local use
	li $t9, 44 # The offset to increment each time

	# Lane 1
	add $t1, $s0, $zero	# Grass tile
	sw $t1, 4($t8)		# Storing the configuration into the array of lanes
	add $t8, $t8, $t9	# Increment address by 100
	# 2
	add $t1, $s0, $zero	# Grass tile
	sw $t1, 4($t8)
	add $t8, $t8, $t9
	# 3 - 7:
	add $t2, $t8, 220	# When to stop
	water_lane_config:
	beq $t2, $t8, middle_grass_config
	add $t1, $s1, $zero	# Water tile
	sw $t1, 4($t8)
	add $t8, $t8, $t9
	j water_lane_config
	middle_grass_config:
	# 8
	add $t1, $s0, $zero	# grass tile
	sw $t1, 4($t8)
	add $t8, $t8, $t9
	# 9 - 13
	add $t2, $t8, 220	# When to stop
	road_lane_config:
	beq $t8, $t2, last_grass_config
	add $t1, $s2, $zero	# road tile	
	sw $t1, 4($t8)
	add $t8, $t8, $t9
	j road_lane_config
	last_grass_config:
	# 14 
	add $t1, $s0, $zero	# Grass tile
	sw $t1, 4($t8)
	add $t8, $t8, $t9
	# 15
	add $t1, $s0, $zero	# Grass tile
	sw $t1, 4($t8)
	add $t8, $t8, $t9
	
###############################################################################################
########################### Main Block ########################################################
main:
	jal INIT_GAME
	game_loop:
		lw $a0, isPlaying
		beqz $a0, game_state_update 	# If not playing, don't make update & draw calls
		li $v0, 30		# Get The current system time. It would be stored in $a0
		syscall
		sll $a0, $a0, 1 # Logical Shift left and right $a0 to avoid it being a negative integer, 
		srl $a0, $a0, 1 # since $a0 is just the lower 32 bits of a positive 64-bits number.
		sub $s6, $a0, $s5	# Get the time elapsed. $s6 is globally used to update the game.
		add $s5, $a0, $zero	# Update $s5 to the new system time.
		jal UPDATE_GAME
		jal DRAW_GAME
		j game_loop	# Main loop
		
		game_state_update:
		lw $t0, isWinning	# Check if the player is winning
		beqz $t0, losing_action	# If not winning
		jal ON_WINNING
		j menu_option_loop
		losing_action:
		jal ON_LOSING
		
	menu_option_loop:
		# Getting keyboard input
		lw $t0, 0xffff0000
		bne $t0, $zero, option_pressed
		j menu_option_loop	# No option is pressed, keep looping
		option_pressed:
		lw $t0, 0xffff0004	# Get the option
		beq $t0, 27, on_escape
		sw $zero, score		# Any other key, we restart the game
		la $t0, goals	# Empty out the goals
		sw $zero 4($t0)
		sw $zero 12($t0)
		sw $zero 20($t0)
		li $t0, 3	# Add 3 lives
		sw $t0, lives
		li $t0, 1
		sw $t0, isPlaying	# Set is playing to 1
		sw $zero, isWinning
		jal RESPAWN_FROG
		li $v0, 30		# Restart the timer
		syscall
		sll $a0, $a0, 1 # Logical Shift left and right $a0 to avoid it being a negative integer, 
		srl $a0, $a0, 1
		add $s5, $a0, $zero
		j game_loop	# Come back to the game loop
		on_escape: 	# Terminate the program
		li $v0, 10
		syscall

###############################################################################################
#################### Function Implementations #################################################
INIT_GAME: # Init the game by spawing objects on the lanes
	add $t0, $s4, $zero # Address of the array of 15 lanes. Each lane is 52 bytes of information.
	add $t1, $t0, 660  # When to stop
	addi $sp, $sp, -4 # grow the stack by 1 word
	sw $ra, 0($sp)	  # Store away $ra
	add $t2, $zero, $zero	# The accumulating y-coord of the lane
	li $s7, 1 # Base direction
	init_lanes_loop:
	beq $t0, $t1, done_lane_init
	sw $t2, 0($t0)	# Store the y-coord into the lane
	addi $sp, $sp, -12 # Grow the stack to store $t0 and $t1
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	add $a0, $t0, $zero	# $a0 = lane address
	sub $s7, $zero, $s7 	# Flip the direction for each lane
	sw $s7, 12($a0)	# Store the direction
	jal INIT_LANE
	
	lw $t0, 0($sp)
	lw $t1, 4($sp)
	lw $t2, 8($sp)
	addi $sp, $sp, 12 	# Shrink the stack
	addi $t0, $t0, 44 	# Increment $t0 to go to the next lane
	addi $t2, $t2, 9	# Increment the y-coord
	j init_lanes_loop
	
	done_lane_init:
	lw $ra, 0($sp)	# Recover $ra
	addi $sp, $sp, 4 # shrink the stack

	jr $ra

INIT_LANE: # Function: INIT_LANE($a0 = lane address)

	add $t9, $a0, $zero # Use t9 to save a0 because a0 will be changed due to later random number generation
	lw $t0, 4($a0)	# The tile address
	beq $t0, $s0, done_init_lane # If it's a grass lane, no configuration needed
	# General configuration phase
	li $a1, 6	# Speed: randomize between 6-11 inclusive. Take random 0-5 first
	li $v0, 42
	syscall
	add $t1, $a0, 6 # 0-5 => 6-11
	sw $t1, 8($t9)	# Store the speed
	sw $s5, 16($t9)	# Expected time to spawn another object, default to $s5

	add $t4, $t9, 20 	# The address of the first element in the object array.
	add $t5, $t4, 24	# First element + 32 is when to stop spawning
	add $t7, $zero, $zero	# Accumulator for min x-coord in the road section
	first_spawn_loop:
		beq $t4, $t5, done_init_lane # Done when address = base address + 32 (8 bytes * 4)
		li $a1, 12	# An upper bound to randomize between [0-12]
		li $v0, 42	# 42 = code for randint[0, upper bound).
		syscall
		add $a0, $t7, $a0	# Get the x-coord by adding the min x-coord and the randomized number
		sw $a0, 0($t4) # store the x-coord
		beq $t0, $s1, first_spawn_water # First we check if it's water or road.
		beq $t0, $s2, first_spawn_road
		# Note, cannot be grass. We filtered the grass case above.
		first_spawn_water:
			lw $a1, waterSpriteNum	# Get the number of sprites in the roadSpriteSheet
			la $t6, waterSpriteSheet
			j done_first_spawn
		first_spawn_road:
			lw $a1, roadSpriteNum	# Get the number of sprites in the roadSpriteSheet
			la $t6, roadSpriteSheet
		done_first_spawn:
		li $v0, 42	# Call the random number generator
		syscall
		mul $a0, $a0, 4 # Get the actual offset to access the correct element of the sprite sheet.
		add $a0, $a0, $t6 # Add the offset to obtain the correct address of the element in the sprite sheet
		lw $a0, 0($a0)	# load the address of the sprite
		sw $a0, 4($t4)  # Store that address.
		addi $t4, $t4, 8	# Increment $t4 to go to the next object
		addi $t7, $t7, 43	# Increment the min x-coord
		j first_spawn_loop

	done_init_lane:
	jr $ra

PLAY_SOUND: #($a0 = pitch, $a1 = duration, $a2 = instrument)
	li $v0, 31
	li $a3, 60
	syscall
	jr $ra
	
RESPAWN_FROG:
	lw $a1, frogStartX
	sw $a1, frogPosX
	lw $a1, frogStartY
	sw $a1, frogPosY
	
	jr $ra

FROG_DIE:
	lw $a1, lives 		# Get the number of lives
	beqz $a1, frog_die_return	# No life left, do nothing
	addi $a1, $a1, -1 	# Remove 1 life
	sw $a1, lives		# Update the number of lives
	li $a1, 1
	sw $a1, isDead		# Set isDead to true
	
	frog_die_return:
	jr $ra

FROG_GOAL:
	li $a2, 117
	sw $a2, frogPrevY	# Reset the prevY
	lw $a2, score 	# Multiple of 99
	addi $a2, $a2, 99 # Add 99 more for the goal
	sw $a2, score	# Store the new score
	li $a1, 0
	lw $a2, goals+4
	add $a1, $a1, $a2
	lw $a2, goals+12
	add $a1, $a1, $a2
	lw $a2, goals+20
	add $a1, $a1, $a2	# if $a1 = 3, then all 3 goals scored
	beq $a1, 3, all_goals_scored	# If 3 goals scored, set isWinning to true
	lw $a1, frogStartX	# Otherwise, Respawn the frog
	lw $a2, frogStartY
	sw $a1, frogPosX
	sw $a2, frogPosY
	j frog_goal_return
	all_goals_scored:
	li $a1, -9
	sw $a1, frogPosY # Set Y-pos to out-of-screen
	li $a2, 1
	sw $a2, isWinning
	sw $zero, isPlaying
	frog_goal_return:
	jr $ra

ON_WINNING:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	la $v0, winningBitmap	# Display the congratulation message in the middle of the screen
	li $a0, 40 # X 
	li $a1, 63 # Y
	li $a2, 52 # W
	li $a3, 9  # H
	jal DRAW_OBJECT
	li $a0, 68
	li $a1, 1060
	li $a2, 112
	jal PLAY_SOUND
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

ON_LOSING:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	la $v0, losingBitmap	# Display the congratulation message in the middle of the screen
	li $a0, 40 # X 
	li $a1, 63 # Y
	li $a2, 61 # W
	li $a3, 9  # H
	jal DRAW_OBJECT
	li $a0, 60
	li $a1, 1060
	li $a2, 96
	jal PLAY_SOUND
	lw $ra, 0($sp)
	addi $sp, $sp, 4

UPDATE_GAME:
	addi $sp, $sp, -4 # grow the stack by 1 word
	sw $ra, 0($sp)	  # Store away $ra

	# First we check if the frog is still alive
	lw $t0, isDead
	beqz $t0, score_update # if isDead = 0 (still alive), we move to the next update. Otherwise, we attempt to respawn
	# Respawn attempt
	lw $a2, lives 		# Get the number of lives
	beq $a2, $zero, no_lives_left	# When 0 heart left, don't respawn
	sw $zero, isDead	# respawn
	jal RESPAWN_FROG
	j score_update
	no_lives_left:
	sw $zero, isPlaying	# Set isPlaying to false. Also, isWinning is default to false.
	j game_update_return	# Skip updating
	
	# Score update
	score_update:
	lw $t0, frogPosY
	lw $t1, frogPrevY
	sub $t1, $t1, $t0	# prev posY - posY
	blt $t1, 1, keyboard_update 		# 0 or negative difference means no score. Move to the next update
	lw $t2, score	
	add $t2, $t2, $t1	# Gives frog score
	sw $t2, score
	sw $t0, frogPrevY	# update the prev pos Y

	keyboard_update:
	# Getting the keyboard input
	lw $v0, 0xffff0000
	beq $v0, 0, update_lanes # If no input, go straight to lane update
	lw $v0, 0xffff0004	# Get the key
	# Check the key
	beq $v0, 0x61, jump_left
	beq $v0, 0x64, jump_right
	beq $v0, 0x77, jump_top
	beq $v0, 0x73, jump_bottom
	j update_lanes 	# Otherwise, go to update lanes
	jump_left:
	lw $t1, frogPosX	# load posX
	blt $t1, 1, update_lanes	# check x <= 0.
	# Start jumping
	sub $t1, $t1, 9		# decrease X by 9
	sw $t1, frogPosX	# Store it to dest X
	j jump_done
	jump_right:
	lw $t1, frogPosX	# load posX
	bgt $t1, 116, update_lanes	# check x >= 117. 
	# Start jumping
	add $t1, $t1, 9		# increase X by 9
	sw $t1, frogPosX	# Store it to dest X
	j jump_done
	jump_top:
	lw $t1, frogPosY	# load posY
	blt $t1, 10, update_lanes	# check Y <= 9.
	# Start jumping
	sub $t1, $t1, 9		# decrease y by 9
	sw $t1, frogPosY	# Store it
	j jump_done
	jump_bottom:
	lw $t1, frogPosY	# load posY
	bgt $t1, 116, update_lanes	# check y >= 117.
	# Start jumping
	add $t1, $t1, 9		# increase Y by 9
	sw $t1, frogPosY	# Store it to dest Y
	
	jump_done:
	# First thing is reset the frog's sticky situation
	sw $zero, frogLogAddress
	li $a0, 63
	li $a1, 450
	li $a2, 115
	jal PLAY_SOUND
	
	update_lanes:
	# Update the 15 lanes and detect collision.
	add $t0, $s4, $zero # Address of the array of 15 lanes. Each lane is 100 bytes of information.
	add $t1, $t0, 660   # When to stop
	
	update_lanes_loop:
	beq $t0, $t1, enough_lane_updates
	addi $sp, $sp, -8 # Grow the stack to store $t0 and $t1
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	
	add $a0, $t0, $zero 	# $a0 = lane address
	jal UPDATE_LANE	
	
	lw $t0, 0($sp)
	lw $t1, 4($sp)
	addi $sp, $sp, 8 	# Shrink the stack
	addi $t0, $t0, 44 	# Increment $t0
	j update_lanes_loop
	
	enough_lane_updates:
	lw $ra, 0($sp)	# Recover $ra
	addi $sp, $sp, 4 # shrink the stack
	
	# Update the position of the frog if it's sticking to a log
	lw $t2, frogLogAddress
	beq $t2, $zero, game_update_return # When the frog is not sticking to a log
	lw $t1, frogPosX
	bgt $t1, 116, game_update_return	# check x >= 117. If yes, don't move the frog
	blt $t1, 1, game_update_return       # check x <= 0. If yes, don't move the frog
	lw $t3, frogLogOffset
	lw $t4, 0($t2)		# Get posX of the log
	add $t1, $t4, $t3 	# Update frogPosX = log pos X + offset
	sw $t1, frogPosX	# Move frog: Store the new frogPosX
	
	game_update_return:
	jr $ra

UPDATE_LANE: # FUCNTION: UPDATE_LANE($a0 = lane address)
	addi $sp, $sp, -4
	sw $ra, 0($sp) # First thing is to store $ra away
	
	add $t9, $a0, $zero # Use t9 to save a0 because a0 will be changed due to later random number generation
	lw $s7, 0($t9)  # Y-coord of the lane
	lw $v1, frogPosY # For collision checking
	lw $t0, 4($t9)	# The tile address
	beq $s7, 9, goal_lane_update # Special update for the goal lane
	beq $t0, $s0, update_return # If it's grass, just skip
	
	lw $t1, 8($a0)	# The speed
	lw $t2, 12($a0) # The direction. -1 = left, right = 1.
	
	add $t4, $a0, 20 	# The address of the first element in the object array (size 10 * 2 words = 80 bytes).
	addi $t5, $t4, 24	# Exceeding-value for the address of the last object
	# Since all objects share the same speed, object displacement can be calculated outside the loop
	mul $t8, $t1, $s6 # $t8 = (velocity * elapsed time). $s6 stores the elapsed time.
	div $t8, $t8, 1000 # Absolute displacement = (velocity * elapsed time) / 1000
	mul $t8, $t8, $t2  # Signed displacement
	li $t3, 0	# Marker for the collision
	update_objects_loop:
		beq $t4, $t5, all_objects_updated
		lw $t6, 0($t4) 	# Get the x-coord of the object
		lw $t7, 4($t4)	# Get the sprite address of the object
		lw $t7, 0($t7)	# Get the width of the object
		sub $t7, $zero, $t7	# get the negation of the width
		addi $t7, $t7, 1	# get (1 - width)
		
		seq $a0, $t2, -1 # going left => a0 = 1
		slt $a1, $t6, $t7 # x < 1 - width
		add $a1, $a0, $a1
		beq $a1, 2, spawn_right # When they sum to 2, spawn_right
		sle $a1, $t6, 127 # a1 = 0 if x > 127
		add $a1, $a0, $a1
		beqz $a1, spawn_left	# When they sum up to 0, spawn left
		# Otherwise, update the object position like normal
		add $t6, $t6, $t8 	# Add the displacement to x-coord
		sw $t6, 0($t4)		# Store the new x-coord
		bne $v1, $s7, continue_obj_update # Skip collision checking when frogPosY != lane pos Y
		### Collision checking
		lw $a2, frogPosX	# Get posX of the frog
		add $a3, $a2, 0x9	# get the "lower bound" of the frog pos
		sub $a1, $t6, $t7	# x - (1 - width) = x + width - 1  get the lower bound of the object
		bgt $a2, $a1, continue_obj_update	# If frogPosX > obj lower bound, no collision
		blt $a3, $t6, continue_obj_update	# If frog lower bound < obj pos X, no collision
		######## Decide what to do with the collision
		beq $t0, $s2, collided_road # If tile is $s2, it's on the road
		collided_water: # Otherwise, collide check water
			li $t3, 1
			lw $t1, frogLogAddress
			bne $t1, $zero, continue_obj_update	# Don't update if the frog is already sticking to a log
			sw $t4, frogLogAddress # Store the object's address
			sub $t1, $a2, $t6 # frogPosX - object posX = offset
			sw $t1, frogLogOffset
			j continue_obj_update
		collided_road:
			jal FROG_DIE
			li $a2, 0x7f # Getting hit by a car
			li $a0, 60
			li $a1, 600
			jal PLAY_SOUND
			j continue_obj_update	# Skip object spawning
		spawn_left:					
		sw $t7,	0($t4)				# Spawn at $t7 = 1 - width
		j spawn_object
		spawn_right:
		li $t1, 127	# Spawn at x = 127
		sw $t1, 0($t4)
		spawn_object:
		beq $t0, $s2, spawn_road #First we check if it's water or road.
			spawn_water:  # Otherwise, spawn water
				lw $a1, waterSpriteNum # Randomly choose a sprite from the car spritesheet. For now we only have 2 sprites, so random[0, 1]
				la $t6, waterSpriteSheet
				j spawn_sprite
			spawn_road:
				lw $a1, roadSpriteNum # Randomly choose a sprite from the car spritesheet. For now we only have 2 sprites, so random[0, 1]
				la $t6, roadSpriteSheet
		spawn_sprite:
		li $v0, 42	# Call the random number generator
		syscall
		mul $a0, $a0, 4 # Get the actual offset to access the correct element of the sprite sheet.
		add $a0, $a0, $t6 # Add the offset to obtain the correct address of the element in the sprite sheet
		lw $a0, 0($a0)	# load the address of the sprite
		sw $a0, 4($t4)  # Store that address.
		continue_obj_update:
		addi $t4, $t4, 8	# Increment $t4 to go to the next object
		j update_objects_loop 
	all_objects_updated: # Now we check if the frog is in water
	bne $t0, $s1, update_return # When it is not water, just return
	bne $v1, $s7, update_return # When the frog is not in the lane, just return
	bnez $t3, update_return	# If $t3 != 0, we have a collision in water lane, so just return
	sw $zero, frogLogAddress # No collision, just reset the frog log Address
	jal FROG_DIE
	li $a2, 0x76	# Drowned
	li $a0, 68
	li $a1, 600
	jal PLAY_SOUND
	j update_return
	# When it's the goal lane
	goal_lane_update:
	lw $t1, frogPosY
	bne $t1, 9, update_return	# If the frog is not in the goal lane, just return
	lw $t0, frogPosX	# Otherwise, check collision with the goals
	la $t2, goals	# Get address of the goals
	addi $t3, $t2, 24 # When all 3 goals are checked
	goal_collision_loop: # check goal collision
	beq $t2, $t3, update_return # Escaping condition: when t2 = t3
	lw $t4, 0($t2) # Get the x-coord of the goal
	blt $t0, $t4, next_goal_collision_loop # frogPosX < goalPosX
	addi $t4, $t4, 8
	bgt $t0, $t4, next_goal_collision_loop # frogPosX > goalPosX + 8
	lw $t5, 4($t2)	# collision detected. Check if the lane is occupied
	bnez $t5, next_goal_collision_loop # If it's occupied (not zero), go next loop
	li $t5, 1		# Mark the goal
	sw $t5, 4($t2)
	jal FROG_GOAL
	li $a2, 112
	li $a0, 64
	li $a1, 500
	jal PLAY_SOUND
	j update_return
	next_goal_collision_loop:
	addi $t2, $t2, 8
	j goal_collision_loop
	
	update_return:
	lw $ra, 0($sp)
	addi $sp, $sp, 4 	# Last thing is to recover $ra
	jr $ra

DRAW_STATS:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	# Clear screen
	add $t0, $s3, $zero	# Display address
	addi $t1, $t0, 4608	# When to stop: When accumulated address = display address + 1152 :=(128*4*9)
	clear_screen_loop:
	beq $t0, $t1, done_clear_screen
	sw $zero, 0($t0) # Clear pixel
	addi $t0, $t0, 4
	j clear_screen_loop
	done_clear_screen:
	add $t0, $zero, $zero # Loop variable: initiate to 0
	lw $t1, lives # num lives: tell we when to stop drawing lives
	draw_lives_loop:
	beq $t0, $t1, done_draw_lives
		addi $sp, $sp, -8
		sw $t0, 0($sp)
		sw $t1, 4($sp)
		
		la $v0, heartBitmap # bitmap Address
		mul $t0, $t0, 8 # offset = loop_var * 9
		add $a0, $t0, 104 # Start drawing lives at x = 90
		li $a1, 1 	# Y = 1
		li $a2, 8 # Width
		li $a3, 8 # Height

		jal DRAW_OBJECT
		
		lw $t0, 0($sp)
		lw $t1, 4($sp)
		addi $sp, $sp, 8
	addi $t0, $t0, 1 # Increment loop counter
	j draw_lives_loop
	done_draw_lives:
	# Draw the score text:
	la $v0, scoreTextBitmap
	li $a0, 0 # x
	li $a1, 0 # y
	li $a2, 28 # width
	li $a3, 9 # height
	jal DRAW_OBJECT
	
	# Draw the actual score: First we use the stack to get all the digits.
	add $t9, $sp, $zero  # Save the original stack address
	lw $a1, score
	li $a2, 10 # Store the number 10 as the divider
	score_digits_split:
	div $a1, $a2 	# a1 / a2 = score / 10
	mflo $a1	# Quotient store in a1
	mfhi $a3	# Remainder stores in $a3 and push into stack
	addi $sp, $sp, -4
	sw $a3, 0($sp)
	beqz $a1, draw_score_digits	# End the loop when quotient is 0
	j score_digits_split
	
	draw_score_digits:
	la $t5, digitBitmap 	# get the address of the digits bitmap
	addi $t6, $zero, 29	# An accumulator for the x coord
	draw_score_digits_loop:
	beq $sp, $t9, draw_stats_return # pull from the stack until it has shrunken to the original size
	lw $t0, 0($sp) 		# pull the digit
	addi $sp, $sp, 4	# Shrink the stack
	mul $t0, $t0, 140	# Since each digit takes 35 words, we multiply with 140 for the actual offset
	add $v0, $t5, $t0	# Add the offset to get the bitmap address of the digit
	add $a0, $t6, $zero	# pos X
	li $a1, 1	# pos Y
	li $a2, 5	# Width
	li $a3, 7	# height
	jal DRAW_OBJECT	# Draw call
	addi $t6, $t6, 5	# increment x-coord
	j draw_score_digits_loop
	
	draw_stats_return:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

DRAW_GAME:
	add $t0, $s4, $zero # Address of the array of 15 lanes.
	add $t1, $t0, 660  # When to stop
	add $t0, $t0, 88   # Skip drawing the first 2 lanes. It is for score display later
	addi $sp, $sp, -4 # grow the stack by 1 word
	sw $ra, 0($sp)
	
	draw_lanes_loop:
	beq $t0, $t1, enough_lanes
	addi $sp, $sp, -8 # Grow the stack to store $t0 and $t1
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	
	add $a0, $t0, $zero # $a0 = lane address
	jal DRAW_LANE	# Draw call
	
	lw $t0, 0($sp)
	lw $t1, 4($sp)
	addi $sp, $sp, 8 # Shrink the stack
	addi $t0, $t0, 44 # Increment $t0
	j draw_lanes_loop
	enough_lanes:
	# Draw the goal:
	jal DRAW_GOAL
	jal DRAW_STATS
	lw $ra, 0($sp)	# Recover $ra
	addi $sp, $sp, 4 # shrink the stack
	
	jr $ra

DRAW_GOAL:
	addi $sp, $sp, -4 # grow the stack by 1 words
	sw $ra, 0($sp) # push $ra into the stack
	add $t0, $zero, $zero	# A counter for the number of tiles drawn
	addi $t1, $zero, 15	# Maxmium value for the counter
	la $t2, goals	# Address of the goal array
	lw $t3, 0($t2)          # goal x location 1
	lw $t4, 8($t2)	   	# goal x location 2
	lw $t5, 16($t2)		# goal x location 3
	draw_goal_loop:
		beq $t0, $t1, enough_goals
		mul $a0, $t0, 9 # posX = tileCount * 9
		li  $a1, 9 	# PosY = 9
		beq $a0, $t3, draw_goal_obj	# PosX = goal X location
		beq $a0, $t4, draw_goal_obj
		beq $a0, $t5, draw_goal_obj
		add $v0, $s0, $zero	# bitmap address is grass if the tile is not a goal block
		j keep_goal_drawing
		draw_goal_obj:
		lw $t8, 4($t2) # Load the value for whether the goal is occupied
		addi $t2, $t2, 8 # When encounter a goal, increment the address of goals array
		beq $t8, $zero, draw_empty_goal
		la $v0, goalMarker		# When $t8 is 1, the goal is occupied. Mark it
		j keep_goal_drawing # If it's the goal, cannot skip
		draw_empty_goal:
		la $v0, goalBitmap
		keep_goal_drawing:
		li  $a2, 9		# Width
		add $a3, $a2, $zero	# height
		# Save important registers before function call
		addi $sp, $sp, -24 # grow the stack by 6 words
		sw $t0, 0($sp)
		sw $t1, 4($sp)
		sw $t2, 8($sp) 	# push register values to save them before function call
		sw $t3, 12($sp)
		sw $t4, 16($sp)
		sw $t5, 20($sp)
		jal DRAW_OBJECT
		# Pop the content of the stack out after function call
		lw $t0, 0($sp)
		lw $t1, 4($sp)
		lw $t2, 8($sp)
		lw $t3, 12($sp)
		lw $t4, 16($sp)
		lw $t5, 20($sp)
		addi $sp, $sp, 24 	# shrink the stack
		skip_goal_drawing:
		addi $t0, $t0, 1 # Increment $t0
		j draw_goal_loop
	enough_goals:
	# If the frog is in this lane, draw it as well
	lw $a1, frogPosY
	bne $a1, 9, return_goal_drawing # Check if the frog is in this lane. If not, just return
	lw $a0, frogPosX
	lw $a2, frogWidth
	lw $a3, frogHeight
	la $v0, frogBitmap 	# Frog never die in a goal lane
	jal DRAW_OBJECT
	return_goal_drawing:
	lw $ra, 0($sp) # Recover $ra
	addi $sp, $sp, 4
	jr $ra

DRAW_LANE: # FUNCTION: DRAW_LANE($a0 = lane address) # The lane address is the address of the first byte in a series of 100 bytes
	addi $sp, $sp, -4
	sw $ra, 0($sp) # Store away $ra
	
	lw $t2, 0($a0) # The Y-coord of the lane
	lw $t3, 4($a0) # The tile address
	lw $t4, 12($a0) # The direction of the objects in the lane. -1 = left, 1 = right
	add $t5, $a0, 20 # The address of the first element in the object array
	add $t0, $zero, $zero	# A counter for the number of tiles drawn
	addi $t1, $zero, 14	# Maxmium value for the counter
	beq $t3, $s1, no_offset # if lane is water
	addi $t4, $t4, 1	# Turn -1/1 into 0/1 by add 1 and then right shift
	srl  $t4, $t4, 1
	j draw_tile_loop
	no_offset:
	add  $t4, $zero, $zero
	draw_tile_loop:
		bgtu $t0, $t1, enough_tiles
		mul $a0, $t0, 9 	# posX = tileCount * 9
		add $a1, $t2, $zero	# posY = $t2
		li  $a2, 9		# Width
		add $a3, $a2, $zero	# height
		add $v0, $t3, $zero	# bitmap address
		# Save important registers before function call
		addi $sp, $sp, -24 # grow the stack by 7 words
		sw $t0, 0($sp)
		sw $t1, 4($sp)
		sw $t2, 8($sp) 	# push register values to save them before function call
		sw $t3, 12($sp)
		sw $t4, 16($sp)
		sw $t5, 20($sp)
		jal DRAW_OBJECT
		# Pop the content of the stack out after function call
		lw $t0, 0($sp)
		lw $t1, 4($sp)
		lw $t2, 8($sp)
		lw $t3, 12($sp)
		lw $t4, 16($sp)
		lw $t5, 20($sp)
		addi $sp, $sp, 24 	# shrink the stack
		addi $t0, $t0, 1 # Increment $t0
		j draw_tile_loop
	enough_tiles:
	beq $t3, $s0, enough_objects # If it's grass, just skip drawing objects
	addi $t0, $t5, 24	# Exceeding-value for the address of the last object
	draw_objects_loop:
		beq $t5, $t0, enough_objects
		lw $a0, 0($t5)		# get posX from the address	$a0
		add $a1, $t2, $zero	# posY = posY of lane		$a1
		lw $t1, 4($t5)		# Get the address of the sprite 
		lw $a2, 0($t1)		# Get the width of the object	$a2
		lw $a3, 4($t1)		# Get the height of the object	$a3
		lw $v0, 8($t1)		# Get the address of the bitmap	$v0
		mul $v1, $a2, $a3	# Offset = width * height
		mul $v1, $v1, $t4	# either 0 or with * height since is $t4 = 0/1
		mul $v1, $v1, 4		# actual offset = offset * 4
		add $v0, $v0, $v1	# Add the offset for the actual address of the bitmap
		li $t6, 1
		sub $t6, $t6, $a2	# Calculate 1 - width
		blt $a0, $t6, skip_obj_drawing	# Skip drawing the object if X < 1 - width or x > 127
		bgt $a0, 127, skip_obj_drawing
		
		addi $sp, $sp, -20 # grow the stack by 6 words
		sw $t0, 0($sp)
		sw $t1, 4($sp)
		sw $t2, 8($sp) 	# push register values to save them before function call
		sw $t4, 12($sp)
		sw $t5, 16($sp)
		jal DRAW_OBJECT	# Draw call
		# Pop the content of the stack out after function call
		lw $t0, 0($sp)
		lw $t1, 4($sp)
		lw $t2, 8($sp)
		lw $t4, 12($sp)
		lw $t5, 16($sp)
		addi $sp, $sp, 20 	# shrink the stack
		
		skip_obj_drawing:
		addi $t5, $t5, 8	# Add 8 to go to the next object
		j draw_objects_loop
	enough_objects:
	# If the frog is in this lane, draw it as well
	lw $a1, frogPosY
	bne $a1, $t2, return_lane_drawing # Check if the frog is in this lane. If not, just return
	lw $a0, frogPosX
	lw $a2, frogWidth
	lw $a3, frogHeight
	la $v0, frogBitmap
	lw $t0, isDead
	beq $t0, $zero, get_normal_frog_bitmap # if not dying, get normal bitmap
	la $v0, deathBitmap	# bitmap of the death
	j draw_frog_normal_lane
	get_normal_frog_bitmap:
	la $v0, frogBitmap
	draw_frog_normal_lane:
	jal DRAW_OBJECT
	return_lane_drawing:
	lw $ra, 0($sp) # recover $ra
	addi $sp, $sp, 4
	jr $ra # return after finish drawing all objects

DRAW_OBJECT: # FUNCTION: DRAW_OBJECT($a0 = posX, $a1 = posY, $a2 = width, $a3 = height, $v0 = bitmap address)
	add $t0, $zero, $zero	# Starting position of Y-accumulator
	add $t1, $zero, $a3	# Store the MAX y-coord (in-screen case) (relative to the height)
	
	li $t8, 0xff000000	# Store the color code for "transparent" for later comparisons
	# Outer loop: row by rows
	obj_row_loop:
		beq $t0, $a3, enough_rows # In screen case y == height
		add $t1, $zero, $zero # Initialize the accumulator for the x-coordinate
		obj_column_loop:
			beq $t1, $a2, enough_columns # in screen case. x == width
			
			mul $t2, $t0, $a2	# offset = y * width
			add $t2, $t2, $t1	# offset = offset + x
			mul $t2, $t2, 4		# Multiply by 4 for actual offset
			add $t2, $t2, $v0	# Get the pixel location of the bitmap in memory
			lw $t2, 0($t2)		# Get the color value from the tile bitmap at the corresponding location
			beq $t2, $t8, skip_drawing 	# When the color code is 0xff000000, meaning transparent pixel
			add $t3, $a1, $t0	# screen Y = starting posY + Y
			add $t4, $a0, $t1	# screen X = starting posX + X
			bltz $t3, skip_drawing	# Checking the screen x-y for values > 127, or < 0
			bltz $t4, skip_drawing
			bgt $t3, 127, skip_drawing
			bgt $t4, 127, skip_drawing
			mul $t3, $t3, 128	# partial offset = screen y * 128
			add $t3, $t3, $t4	# full offset = partial offset + screen X
			mul $t3, $t3, 4		# Multiply by 4 for the actual offset
			add $t3, $t3, $s3 	# Absolute pixel address = displayAddress + offset
			sw $t2, 0($t3) 		# Store the color value into the corresponding address of the screen-pixel
			skip_drawing:
			addi $t1, $t1, 1 	# increament the x-coord
			j obj_column_loop
		enough_columns:	# exit the inner loop
		addi $t0, $t0, 1	# increment the y-coord
		j obj_row_loop
	enough_rows: # Return
		jr $ra
